# -*- coding: utf-8 -*-
"""App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15xSzM5rKsNfw8oqk_JqC9NzmD89_74p_
"""

import streamlit as st
from datetime import date, timedelta
import sqlite3
import pandas as pd
import pyttsx3
from sentence_transformers import SentenceTransformer, util

# =========================
# إعداد الصفحة
# =========================
st.set_page_config(
    page_title="المنظم الأكاديمي الذكي",
    layout="wide",
    initial_sidebar_state="expanded"
)

# =========================
# قاعدة بيانات في الذاكرة + seed
# =========================
@st.cache_resource
def init_db():
    conn = sqlite3.connect(":memory:", check_same_thread=False)
    cur = conn.cursor()
    cur.executescript("""
    CREATE TABLE Students (
        StudentID INTEGER PRIMARY KEY AUTOINCREMENT,
        Username TEXT UNIQUE,
        Password TEXT,
        FullName TEXT,
        Department TEXT
    );
    CREATE TABLE Schedules (
        ScheduleID INTEGER PRIMARY KEY AUTOINCREMENT,
        StudentID INTEGER,
        Day TEXT,
        StartTime TEXT,
        EndTime TEXT,
        Subject TEXT,
        Room TEXT
    );
    CREATE TABLE Tasks (
        TaskID INTEGER PRIMARY KEY AUTOINCREMENT,
        StudentID INTEGER,
        Title TEXT,
        DueDate TEXT,
        EstHours REAL,
        Priority TEXT,
        Done INTEGER DEFAULT 0
    );
    CREATE TABLE Embeddings (
        TaskID INTEGER PRIMARY KEY,
        Embedding BLOB
    );
    """)
    return conn, cur

@st.cache_data
def seed_demo(cur):
    cur.execute("INSERT INTO Students (Username, Password, FullName, Department) VALUES (?,?,?,?)",
                ("ahmed","1234","أحمد محمد","علوم الحاسوب"))
    today = date.today()
    cur.executemany("INSERT INTO Schedules (StudentID, Day, StartTime, EndTime, Subject, Room) VALUES (?,?,?,?,?,?)", [
        (1,"الأحد","09:00","11:00","برمجة","A101"),
        (1,"الاثنين","10:00","12:00","رياضيات","B201"),
        (1,"الثلاثاء","11:00","13:00","ذكاء اصطناعي","A102"),
        (1,"الأربعاء","09:00","11:00","فيزياء","C101"),
        (1,"الخميس","10:00","12:00","نظم تشغيل","C301")
    ])
    cur.executemany("INSERT INTO Tasks (StudentID, Title, DueDate, EstHours, Priority) VALUES (?,?,?,?,?)", [
        (1,"مشروع بايثون","%s"%(today + timedelta(days=3)),6.0,"High"),
        (1,"واجب رياضيات","%s"%(today + timedelta(days=1)),2.0,"Medium"),
        (1,"مراجعة الذكاء الاصطناعي","%s"%(today + timedelta(days=7)),4.0,"Low"),
        (1,"تجهيز مختبر الفيزياء","%s"%(today + timedelta(days=2)),3.0,"High")
    ])

# =========================
# دوال مساعدة
# =========================
def authenticate(cur, username, password):
    cur.execute("SELECT StudentID, FullName, Department FROM Students WHERE Username=? AND Password=?", (username, password))
    return cur.fetchone()

def fetch_schedule(cur, student_id):
    cur.execute("SELECT Day, StartTime, EndTime, Subject, Room FROM Schedules WHERE StudentID=? ORDER BY Day, StartTime", (student_id,))
    return cur.fetchall()

def fetch_tasks(cur, student_id):
    cur.execute("SELECT TaskID, Title, DueDate, EstHours, Priority, Done FROM Tasks WHERE StudentID=? ORDER BY DueDate", (student_id,))
    return cur.fetchall()

def update_task_done(cur, task_id):
    cur.execute("UPDATE Tasks SET Done=1 WHERE TaskID=?", (task_id,))

def get_upcoming_tasks(tasks, days=3):
    now = date.today()
    return [t for t in tasks if not t[5] and now <= date.fromisoformat(t[2]) <= now+timedelta(days=days)]

def get_overdue_tasks(tasks):
    now = date.today()
    return [t for t in tasks if not t[5] and date.fromisoformat(t[2]) < now]

def summarize_week(tasks):
    today = date.today()
    week_end = today + timedelta(days=7)
    week_tasks = [t for t in tasks if today <= date.fromisoformat(t[2]) <= week_end and not t[5]]
    return week_tasks

def plan_study(tasks):
    plan = sorted([t for t in tasks if not t[5]], key=lambda x: (x[4], x[2]))
    return plan

# =========================
# إعداد نموذج Embeddings للبحث الدلالي
# =========================
@st.cache_resource
def init_embeddings():
    model = SentenceTransformer('all-MiniLM-L6-v2')
    return model

def semantic_search(query, tasks, model):
    if not tasks:
        return []
    task_texts = [t[1] for t in tasks]
    embeddings = model.encode(task_texts, convert_to_tensor=True)
    query_emb = model.encode(query, convert_to_tensor=True)
    hits = util.semantic_search(query_emb, embeddings, top_k=3)
    results = [tasks[h['corpus_id']] for h in hits[0]]
    return results

# =========================
# مساعد صوتي
# =========================
def speak(text):
    engine = pyttsx3.init()
    engine.say(text)
    engine.runAndWait()

# =========================
# التطبيق الرئيسي
# =========================
def main():
    st.title("📘 المنظم الأكاديمي الذكي")

    if "db_init" not in st.session_state:
        conn, cur = init_db()
        seed_demo(cur)
        conn.commit()
        st.session_state.conn = conn
        st.session_state.cur = cur
        st.session_state.db_init = True

    cur = st.session_state.cur

    # تسجيل دخول الطالب
    if "student" not in st.session_state:
        with st.form("login_form"):
            username = st.text_input("👤 اسم المستخدم")
            password = st.text_input("🔑 كلمة المرور", type="password")
            submit = st.form_submit_button("دخول")
            if submit:
                auth = authenticate(cur, username, password)
                if auth:
                    st.session_state.student = {"id": auth[0], "name": auth[1], "dept": auth[2]}
                    st.success(f"مرحباً {auth[1]} 👋")
                else:
                    st.error("❌ بيانات الدخول غير صحيحة")
        return

    student_id = st.session_state.student["id"]

    st.subheader(f"مرحبا {st.session_state.student['name']} — {st.session_state.student['dept']}")

    # جدول و مهام
    schedule = fetch_schedule(cur, student_id)
    tasks = fetch_tasks(cur, student_id)

    st.write("### 🗓 جدول الأسبوع")
    st.table(pd.DataFrame(schedule, columns=["اليوم","الساعة من","الساعة إلى","المادة","الغرفة"]))

    st.write("### ✅ المهام")
    st.table(pd.DataFrame(tasks, columns=["ID","العنوان","تاريخ التسليم","الساعات المقدرة","الأولوية","تم الإنجاز"]))

    # تحديث حالة المهام
    st.write("### تحديث المهام المكتملة")
    for t in tasks:
        if not t[5]:
            if st.button(f"تم إنجاز: {t[1]}", key=t[0]):
                update_task_done(cur, t[0])
                st.success(f"تم تحديث المهمة: {t[1]}")

    # البحث الدلالي
    st.write("### 🔍 بحث دلالي عن المهام")
    model = init_embeddings()
    query = st.text_input("اكتب نص للبحث عن مهمة")
    if query:
        results = semantic_search(query, tasks, model)
        for r in results:
            st.info(f"{r[1]} — تسليم: {r[2]}")

    # مساعد صوتي
    st.write("### 🎤 مساعد صوتي")
    text_to_speak = st.text_input("اكتب نص لتحويله للصوت")
    if st.button("🔊 تشغيل الصوت"):
        speak(text_to_speak)

    # Google Calendar رابط
    st.write("### 📅 إضافة المهام إلى Google Calendar")
    for t in tasks:
        if not t[5]:
            gcal_link = f"https://calendar.google.com/calendar/render?action=TEMPLATE&text={t[1]}&dates={t[2].replace('-','')}T090000Z/{t[2].replace('-','')}T100000Z"
            st.markdown(f"[➕ إضافة {t[1]}]( {gcal_link} )", unsafe_allow_html=True)

if __name__ == "__main__":
    main()